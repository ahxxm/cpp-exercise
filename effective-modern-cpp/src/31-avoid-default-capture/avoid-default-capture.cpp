#include <functional>
#include <iostream>
#include <vector>
#include "gtest/gtest.h"

// lambda expression: the source code
// clojure: runtime object generated by lambda,
// it holds copies/refs to captured data depend on mode.
// clojure class: a class from which clojure is instantiated

void copy() {
  int x = 2; // local
  auto c1 = [x](int y) {return x * y > 42;};
  auto c2 = c1; // copy of c1
  auto c3 = c2; // copy of c2
  std::cout << &c3 << std::endl;
}


// default capture mode: by reference
// can lead to dangling references
using Container = std::vector<std::function<bool(int)>>;
Container filters;

void dangle_ref() {
  // SUPPOSE get local i dynamically
  // i=calc();
  auto i = 42;

  // emplace_back a LOCAL value, dangling i
  // filters.emplace_back([ & ](int value) {return value % i == 0;});

  // FIX: explicitly capture value
  filters.emplace_back([ = ](int value) {return value % i == 0;});
}


TEST(AvoidDefaultCaptureTest, SomeTest) {
  copy();
  dangle_ref();
}

int main(int argc, char *argv[]) {
  ::testing::InitGoogleTest(&argc, argv);
  int ret = RUN_ALL_TESTS();
  return ret;
}
